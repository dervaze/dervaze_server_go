// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package lang

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// DervazeClient is the client API for Dervaze service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DervazeClient interface {
	VisencToOttoman(ctx context.Context, in *OttomanWord, opts ...grpc.CallOption) (*OttomanWord, error)
	OttomanToVisenc(ctx context.Context, in *OttomanWord, opts ...grpc.CallOption) (*OttomanWord, error)
	SearchRoots(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*RootSet, error)
	Translate(ctx context.Context, in *TranslateRequest, opts ...grpc.CallOption) (*TranslateResponse, error)
}

type dervazeClient struct {
	cc grpc.ClientConnInterface
}

func NewDervazeClient(cc grpc.ClientConnInterface) DervazeClient {
	return &dervazeClient{cc}
}

func (c *dervazeClient) VisencToOttoman(ctx context.Context, in *OttomanWord, opts ...grpc.CallOption) (*OttomanWord, error) {
	out := new(OttomanWord)
	err := c.cc.Invoke(ctx, "/dervaze.Dervaze/VisencToOttoman", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dervazeClient) OttomanToVisenc(ctx context.Context, in *OttomanWord, opts ...grpc.CallOption) (*OttomanWord, error) {
	out := new(OttomanWord)
	err := c.cc.Invoke(ctx, "/dervaze.Dervaze/OttomanToVisenc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dervazeClient) SearchRoots(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*RootSet, error) {
	out := new(RootSet)
	err := c.cc.Invoke(ctx, "/dervaze.Dervaze/SearchRoots", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dervazeClient) Translate(ctx context.Context, in *TranslateRequest, opts ...grpc.CallOption) (*TranslateResponse, error) {
	out := new(TranslateResponse)
	err := c.cc.Invoke(ctx, "/dervaze.Dervaze/Translate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DervazeServer is the server API for Dervaze service.
// All implementations must embed UnimplementedDervazeServer
// for forward compatibility
type DervazeServer interface {
	VisencToOttoman(context.Context, *OttomanWord) (*OttomanWord, error)
	OttomanToVisenc(context.Context, *OttomanWord) (*OttomanWord, error)
	SearchRoots(context.Context, *SearchRequest) (*RootSet, error)
	Translate(context.Context, *TranslateRequest) (*TranslateResponse, error)
	mustEmbedUnimplementedDervazeServer()
}

// UnimplementedDervazeServer must be embedded to have forward compatible implementations.
type UnimplementedDervazeServer struct {
}

func (UnimplementedDervazeServer) VisencToOttoman(context.Context, *OttomanWord) (*OttomanWord, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VisencToOttoman not implemented")
}
func (UnimplementedDervazeServer) OttomanToVisenc(context.Context, *OttomanWord) (*OttomanWord, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OttomanToVisenc not implemented")
}
func (UnimplementedDervazeServer) SearchRoots(context.Context, *SearchRequest) (*RootSet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchRoots not implemented")
}
func (UnimplementedDervazeServer) Translate(context.Context, *TranslateRequest) (*TranslateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Translate not implemented")
}
func (UnimplementedDervazeServer) mustEmbedUnimplementedDervazeServer() {}

// UnsafeDervazeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DervazeServer will
// result in compilation errors.
type UnsafeDervazeServer interface {
	mustEmbedUnimplementedDervazeServer()
}

func RegisterDervazeServer(s grpc.ServiceRegistrar, srv DervazeServer) {
	s.RegisterService(&Dervaze_ServiceDesc, srv)
}

func _Dervaze_VisencToOttoman_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OttomanWord)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DervazeServer).VisencToOttoman(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dervaze.Dervaze/VisencToOttoman",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DervazeServer).VisencToOttoman(ctx, req.(*OttomanWord))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dervaze_OttomanToVisenc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OttomanWord)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DervazeServer).OttomanToVisenc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dervaze.Dervaze/OttomanToVisenc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DervazeServer).OttomanToVisenc(ctx, req.(*OttomanWord))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dervaze_SearchRoots_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DervazeServer).SearchRoots(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dervaze.Dervaze/SearchRoots",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DervazeServer).SearchRoots(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dervaze_Translate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TranslateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DervazeServer).Translate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dervaze.Dervaze/Translate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DervazeServer).Translate(ctx, req.(*TranslateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Dervaze_ServiceDesc is the grpc.ServiceDesc for Dervaze service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Dervaze_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dervaze.Dervaze",
	HandlerType: (*DervazeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "VisencToOttoman",
			Handler:    _Dervaze_VisencToOttoman_Handler,
		},
		{
			MethodName: "OttomanToVisenc",
			Handler:    _Dervaze_OttomanToVisenc_Handler,
		},
		{
			MethodName: "SearchRoots",
			Handler:    _Dervaze_SearchRoots_Handler,
		},
		{
			MethodName: "Translate",
			Handler:    _Dervaze_Translate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lang/dervaze.proto",
}
