// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.6.1
// source: lang/dervaze.proto

package lang

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type SearchType int32

const (
	SearchType_PREFIX SearchType = 0
	SearchType_FUZZY  SearchType = 1
	SearchType_REGEX  SearchType = 2
)

// Enum value maps for SearchType.
var (
	SearchType_name = map[int32]string{
		0: "PREFIX",
		1: "FUZZY",
		2: "REGEX",
	}
	SearchType_value = map[string]int32{
		"PREFIX": 0,
		"FUZZY":  1,
		"REGEX":  2,
	}
)

func (x SearchType) Enum() *SearchType {
	p := new(SearchType)
	*p = x
	return p
}

func (x SearchType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SearchType) Descriptor() protoreflect.EnumDescriptor {
	return file_lang_dervaze_proto_enumTypes[0].Descriptor()
}

func (SearchType) Type() protoreflect.EnumType {
	return &file_lang_dervaze_proto_enumTypes[0]
}

func (x SearchType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SearchType.Descriptor instead.
func (SearchType) EnumDescriptor() ([]byte, []int) {
	return file_lang_dervaze_proto_rawDescGZIP(), []int{0}
}

type SearchField int32

const (
	SearchField_AUTO          SearchField = 0
	SearchField_TURKISH_LATIN SearchField = 1
	SearchField_VISENC        SearchField = 2
	SearchField_OTTOMAN       SearchField = 3
	SearchField_ABJAD         SearchField = 4
)

// Enum value maps for SearchField.
var (
	SearchField_name = map[int32]string{
		0: "AUTO",
		1: "TURKISH_LATIN",
		2: "VISENC",
		3: "OTTOMAN",
		4: "ABJAD",
	}
	SearchField_value = map[string]int32{
		"AUTO":          0,
		"TURKISH_LATIN": 1,
		"VISENC":        2,
		"OTTOMAN":       3,
		"ABJAD":         4,
	}
)

func (x SearchField) Enum() *SearchField {
	p := new(SearchField)
	*p = x
	return p
}

func (x SearchField) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SearchField) Descriptor() protoreflect.EnumDescriptor {
	return file_lang_dervaze_proto_enumTypes[1].Descriptor()
}

func (SearchField) Type() protoreflect.EnumType {
	return &file_lang_dervaze_proto_enumTypes[1]
}

func (x SearchField) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SearchField.Descriptor instead.
func (SearchField) EnumDescriptor() ([]byte, []int) {
	return file_lang_dervaze_proto_rawDescGZIP(), []int{1}
}

type Req int32

const (
	Req_NEVER  Req = 0
	Req_MAYBE  Req = 1
	Req_ALWAYS Req = 2
)

// Enum value maps for Req.
var (
	Req_name = map[int32]string{
		0: "NEVER",
		1: "MAYBE",
		2: "ALWAYS",
	}
	Req_value = map[string]int32{
		"NEVER":  0,
		"MAYBE":  1,
		"ALWAYS": 2,
	}
)

func (x Req) Enum() *Req {
	p := new(Req)
	*p = x
	return p
}

func (x Req) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Req) Descriptor() protoreflect.EnumDescriptor {
	return file_lang_dervaze_proto_enumTypes[2].Descriptor()
}

func (Req) Type() protoreflect.EnumType {
	return &file_lang_dervaze_proto_enumTypes[2]
}

func (x Req) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Req.Descriptor instead.
func (Req) EnumDescriptor() ([]byte, []int) {
	return file_lang_dervaze_proto_rawDescGZIP(), []int{2}
}

type PartOfSpeech int32

const (
	PartOfSpeech_NOUN        PartOfSpeech = 0
	PartOfSpeech_VERB        PartOfSpeech = 1
	PartOfSpeech_PROPER_NOUN PartOfSpeech = 2
)

// Enum value maps for PartOfSpeech.
var (
	PartOfSpeech_name = map[int32]string{
		0: "NOUN",
		1: "VERB",
		2: "PROPER_NOUN",
	}
	PartOfSpeech_value = map[string]int32{
		"NOUN":        0,
		"VERB":        1,
		"PROPER_NOUN": 2,
	}
)

func (x PartOfSpeech) Enum() *PartOfSpeech {
	p := new(PartOfSpeech)
	*p = x
	return p
}

func (x PartOfSpeech) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PartOfSpeech) Descriptor() protoreflect.EnumDescriptor {
	return file_lang_dervaze_proto_enumTypes[3].Descriptor()
}

func (PartOfSpeech) Type() protoreflect.EnumType {
	return &file_lang_dervaze_proto_enumTypes[3]
}

func (x PartOfSpeech) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PartOfSpeech.Descriptor instead.
func (PartOfSpeech) EnumDescriptor() ([]byte, []int) {
	return file_lang_dervaze_proto_rawDescGZIP(), []int{3}
}

type TranslationDirection int32

const (
	TranslationDirection_tr2otm TranslationDirection = 0
	TranslationDirection_otm2tr TranslationDirection = 1
)

// Enum value maps for TranslationDirection.
var (
	TranslationDirection_name = map[int32]string{
		0: "tr2otm",
		1: "otm2tr",
	}
	TranslationDirection_value = map[string]int32{
		"tr2otm": 0,
		"otm2tr": 1,
	}
)

func (x TranslationDirection) Enum() *TranslationDirection {
	p := new(TranslationDirection)
	*p = x
	return p
}

func (x TranslationDirection) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TranslationDirection) Descriptor() protoreflect.EnumDescriptor {
	return file_lang_dervaze_proto_enumTypes[4].Descriptor()
}

func (TranslationDirection) Type() protoreflect.EnumType {
	return &file_lang_dervaze_proto_enumTypes[4]
}

func (x TranslationDirection) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TranslationDirection.Descriptor instead.
func (TranslationDirection) EnumDescriptor() ([]byte, []int) {
	return file_lang_dervaze_proto_rawDescGZIP(), []int{4}
}

type SearchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SearchField  SearchField `protobuf:"varint,10,opt,name=searchField,proto3,enum=dervaze.SearchField" json:"searchField,omitempty"`
	SearchString string      `protobuf:"bytes,11,opt,name=searchString,proto3" json:"searchString,omitempty"`
	SearchType   SearchType  `protobuf:"varint,14,opt,name=searchType,proto3,enum=dervaze.SearchType" json:"searchType,omitempty"`
	ResultLimit  int32       `protobuf:"varint,15,opt,name=resultLimit,proto3" json:"resultLimit,omitempty"`
}

func (x *SearchRequest) Reset() {
	*x = SearchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lang_dervaze_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchRequest) ProtoMessage() {}

func (x *SearchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lang_dervaze_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchRequest.ProtoReflect.Descriptor instead.
func (*SearchRequest) Descriptor() ([]byte, []int) {
	return file_lang_dervaze_proto_rawDescGZIP(), []int{0}
}

func (x *SearchRequest) GetSearchField() SearchField {
	if x != nil {
		return x.SearchField
	}
	return SearchField_AUTO
}

func (x *SearchRequest) GetSearchString() string {
	if x != nil {
		return x.SearchString
	}
	return ""
}

func (x *SearchRequest) GetSearchType() SearchType {
	if x != nil {
		return x.SearchType
	}
	return SearchType_PREFIX
}

func (x *SearchRequest) GetResultLimit() int32 {
	if x != nil {
		return x.ResultLimit
	}
	return 0
}

type OttomanWord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Visenc           string   `protobuf:"bytes,1,opt,name=visenc,proto3" json:"visenc,omitempty"`
	Unicode          string   `protobuf:"bytes,2,opt,name=unicode,proto3" json:"unicode,omitempty"`
	Abjad            int32    `protobuf:"varint,3,opt,name=abjad,proto3" json:"abjad,omitempty"`
	VisencLetters    []string `protobuf:"bytes,4,rep,name=visencLetters,proto3" json:"visencLetters,omitempty"`
	SearchKey        string   `protobuf:"bytes,5,opt,name=searchKey,proto3" json:"searchKey,omitempty"`
	DotlessSearchKey string   `protobuf:"bytes,6,opt,name=dotlessSearchKey,proto3" json:"dotlessSearchKey,omitempty"`
}

func (x *OttomanWord) Reset() {
	*x = OttomanWord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lang_dervaze_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OttomanWord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OttomanWord) ProtoMessage() {}

func (x *OttomanWord) ProtoReflect() protoreflect.Message {
	mi := &file_lang_dervaze_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OttomanWord.ProtoReflect.Descriptor instead.
func (*OttomanWord) Descriptor() ([]byte, []int) {
	return file_lang_dervaze_proto_rawDescGZIP(), []int{1}
}

func (x *OttomanWord) GetVisenc() string {
	if x != nil {
		return x.Visenc
	}
	return ""
}

func (x *OttomanWord) GetUnicode() string {
	if x != nil {
		return x.Unicode
	}
	return ""
}

func (x *OttomanWord) GetAbjad() int32 {
	if x != nil {
		return x.Abjad
	}
	return 0
}

func (x *OttomanWord) GetVisencLetters() []string {
	if x != nil {
		return x.VisencLetters
	}
	return nil
}

func (x *OttomanWord) GetSearchKey() string {
	if x != nil {
		return x.SearchKey
	}
	return ""
}

func (x *OttomanWord) GetDotlessSearchKey() string {
	if x != nil {
		return x.DotlessSearchKey
	}
	return ""
}

type Root struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TurkishLatin          string       `protobuf:"bytes,1,opt,name=turkishLatin,proto3" json:"turkishLatin,omitempty"`
	Ottoman               *OttomanWord `protobuf:"bytes,2,opt,name=ottoman,proto3" json:"ottoman,omitempty"`
	LastVowel             string       `protobuf:"bytes,3,opt,name=lastVowel,proto3" json:"lastVowel,omitempty"`
	LastConsonant         string       `protobuf:"bytes,4,opt,name=lastConsonant,proto3" json:"lastConsonant,omitempty"`
	EffectiveLastVowel    string       `protobuf:"bytes,5,opt,name=effectiveLastVowel,proto3" json:"effectiveLastVowel,omitempty"`
	EffectiveTurkishLatin string       `protobuf:"bytes,6,opt,name=effectiveTurkishLatin,proto3" json:"effectiveTurkishLatin,omitempty"`
	EffectiveVisenc       string       `protobuf:"bytes,7,opt,name=effectiveVisenc,proto3" json:"effectiveVisenc,omitempty"`
	Abjad                 int32        `protobuf:"varint,8,opt,name=abjad,proto3" json:"abjad,omitempty"`
	PartOfSpeech          PartOfSpeech `protobuf:"varint,9,opt,name=partOfSpeech,proto3,enum=dervaze.PartOfSpeech" json:"partOfSpeech,omitempty"`
	EndsWithVowel         bool         `protobuf:"varint,16,opt,name=endsWithVowel,proto3" json:"endsWithVowel,omitempty"`
	HasSingleVowel        bool         `protobuf:"varint,17,opt,name=hasSingleVowel,proto3" json:"hasSingleVowel,omitempty"`
	LastVowelHard         bool         `protobuf:"varint,18,opt,name=lastVowelHard,proto3" json:"lastVowelHard,omitempty"`
	LastConsonantHard     bool         `protobuf:"varint,19,opt,name=lastConsonantHard,proto3" json:"lastConsonantHard,omitempty"`
	HasConsonantSoftening bool         `protobuf:"varint,20,opt,name=hasConsonantSoftening,proto3" json:"hasConsonantSoftening,omitempty"`
}

func (x *Root) Reset() {
	*x = Root{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lang_dervaze_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Root) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Root) ProtoMessage() {}

func (x *Root) ProtoReflect() protoreflect.Message {
	mi := &file_lang_dervaze_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Root.ProtoReflect.Descriptor instead.
func (*Root) Descriptor() ([]byte, []int) {
	return file_lang_dervaze_proto_rawDescGZIP(), []int{2}
}

func (x *Root) GetTurkishLatin() string {
	if x != nil {
		return x.TurkishLatin
	}
	return ""
}

func (x *Root) GetOttoman() *OttomanWord {
	if x != nil {
		return x.Ottoman
	}
	return nil
}

func (x *Root) GetLastVowel() string {
	if x != nil {
		return x.LastVowel
	}
	return ""
}

func (x *Root) GetLastConsonant() string {
	if x != nil {
		return x.LastConsonant
	}
	return ""
}

func (x *Root) GetEffectiveLastVowel() string {
	if x != nil {
		return x.EffectiveLastVowel
	}
	return ""
}

func (x *Root) GetEffectiveTurkishLatin() string {
	if x != nil {
		return x.EffectiveTurkishLatin
	}
	return ""
}

func (x *Root) GetEffectiveVisenc() string {
	if x != nil {
		return x.EffectiveVisenc
	}
	return ""
}

func (x *Root) GetAbjad() int32 {
	if x != nil {
		return x.Abjad
	}
	return 0
}

func (x *Root) GetPartOfSpeech() PartOfSpeech {
	if x != nil {
		return x.PartOfSpeech
	}
	return PartOfSpeech_NOUN
}

func (x *Root) GetEndsWithVowel() bool {
	if x != nil {
		return x.EndsWithVowel
	}
	return false
}

func (x *Root) GetHasSingleVowel() bool {
	if x != nil {
		return x.HasSingleVowel
	}
	return false
}

func (x *Root) GetLastVowelHard() bool {
	if x != nil {
		return x.LastVowelHard
	}
	return false
}

func (x *Root) GetLastConsonantHard() bool {
	if x != nil {
		return x.LastConsonantHard
	}
	return false
}

func (x *Root) GetHasConsonantSoftening() bool {
	if x != nil {
		return x.HasConsonantSoftening
	}
	return false
}

type RootSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Roots []*Root `protobuf:"bytes,1,rep,name=roots,proto3" json:"roots,omitempty"`
}

func (x *RootSet) Reset() {
	*x = RootSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lang_dervaze_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RootSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RootSet) ProtoMessage() {}

func (x *RootSet) ProtoReflect() protoreflect.Message {
	mi := &file_lang_dervaze_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RootSet.ProtoReflect.Descriptor instead.
func (*RootSet) Descriptor() ([]byte, []int) {
	return file_lang_dervaze_proto_rawDescGZIP(), []int{3}
}

func (x *RootSet) GetRoots() []*Root {
	if x != nil {
		return x.Roots
	}
	return nil
}

type Suffix struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TurkishLatin               string       `protobuf:"bytes,1,opt,name=turkishLatin,proto3" json:"turkishLatin,omitempty"`
	Ottoman                    *OttomanWord `protobuf:"bytes,2,opt,name=ottoman,proto3" json:"ottoman,omitempty"`
	MorphologicalClass         string       `protobuf:"bytes,3,opt,name=morphologicalClass,proto3" json:"morphologicalClass,omitempty"`
	RequiredLastVowel          string       `protobuf:"bytes,4,opt,name=requiredLastVowel,proto3" json:"requiredLastVowel,omitempty"`
	RequiresPOS                PartOfSpeech `protobuf:"varint,5,opt,name=requiresPOS,proto3,enum=dervaze.PartOfSpeech" json:"requiresPOS,omitempty"`
	RequiresEndsWithVowel      Req          `protobuf:"varint,6,opt,name=requiresEndsWithVowel,proto3,enum=dervaze.Req" json:"requiresEndsWithVowel,omitempty"`
	RequiresHasSingleVowel     Req          `protobuf:"varint,7,opt,name=requiresHasSingleVowel,proto3,enum=dervaze.Req" json:"requiresHasSingleVowel,omitempty"`
	RequiresLastConsonantHard  Req          `protobuf:"varint,8,opt,name=requiresLastConsonantHard,proto3,enum=dervaze.Req" json:"requiresLastConsonantHard,omitempty"`
	SetsLastVowelTo            string       `protobuf:"bytes,9,opt,name=setsLastVowelTo,proto3" json:"setsLastVowelTo,omitempty"`
	RequiresContinuationSuffix Req          `protobuf:"varint,10,opt,name=requiresContinuationSuffix,proto3,enum=dervaze.Req" json:"requiresContinuationSuffix,omitempty"`
	InvalidateSuffixClasses    []string     `protobuf:"bytes,11,rep,name=invalidateSuffixClasses,proto3" json:"invalidateSuffixClasses,omitempty"`
	ConvertsPOSto              PartOfSpeech `protobuf:"varint,12,opt,name=convertsPOSto,proto3,enum=dervaze.PartOfSpeech" json:"convertsPOSto,omitempty"`
	EndsWithVowel              bool         `protobuf:"varint,13,opt,name=endsWithVowel,proto3" json:"endsWithVowel,omitempty"`
}

func (x *Suffix) Reset() {
	*x = Suffix{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lang_dervaze_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Suffix) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Suffix) ProtoMessage() {}

func (x *Suffix) ProtoReflect() protoreflect.Message {
	mi := &file_lang_dervaze_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Suffix.ProtoReflect.Descriptor instead.
func (*Suffix) Descriptor() ([]byte, []int) {
	return file_lang_dervaze_proto_rawDescGZIP(), []int{4}
}

func (x *Suffix) GetTurkishLatin() string {
	if x != nil {
		return x.TurkishLatin
	}
	return ""
}

func (x *Suffix) GetOttoman() *OttomanWord {
	if x != nil {
		return x.Ottoman
	}
	return nil
}

func (x *Suffix) GetMorphologicalClass() string {
	if x != nil {
		return x.MorphologicalClass
	}
	return ""
}

func (x *Suffix) GetRequiredLastVowel() string {
	if x != nil {
		return x.RequiredLastVowel
	}
	return ""
}

func (x *Suffix) GetRequiresPOS() PartOfSpeech {
	if x != nil {
		return x.RequiresPOS
	}
	return PartOfSpeech_NOUN
}

func (x *Suffix) GetRequiresEndsWithVowel() Req {
	if x != nil {
		return x.RequiresEndsWithVowel
	}
	return Req_NEVER
}

func (x *Suffix) GetRequiresHasSingleVowel() Req {
	if x != nil {
		return x.RequiresHasSingleVowel
	}
	return Req_NEVER
}

func (x *Suffix) GetRequiresLastConsonantHard() Req {
	if x != nil {
		return x.RequiresLastConsonantHard
	}
	return Req_NEVER
}

func (x *Suffix) GetSetsLastVowelTo() string {
	if x != nil {
		return x.SetsLastVowelTo
	}
	return ""
}

func (x *Suffix) GetRequiresContinuationSuffix() Req {
	if x != nil {
		return x.RequiresContinuationSuffix
	}
	return Req_NEVER
}

func (x *Suffix) GetInvalidateSuffixClasses() []string {
	if x != nil {
		return x.InvalidateSuffixClasses
	}
	return nil
}

func (x *Suffix) GetConvertsPOSto() PartOfSpeech {
	if x != nil {
		return x.ConvertsPOSto
	}
	return PartOfSpeech_NOUN
}

func (x *Suffix) GetEndsWithVowel() bool {
	if x != nil {
		return x.EndsWithVowel
	}
	return false
}

type SuffixSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Suffixes []*Suffix `protobuf:"bytes,1,rep,name=suffixes,proto3" json:"suffixes,omitempty"`
	Tag      string    `protobuf:"bytes,2,opt,name=tag,proto3" json:"tag,omitempty"`
}

func (x *SuffixSet) Reset() {
	*x = SuffixSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lang_dervaze_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuffixSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuffixSet) ProtoMessage() {}

func (x *SuffixSet) ProtoReflect() protoreflect.Message {
	mi := &file_lang_dervaze_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuffixSet.ProtoReflect.Descriptor instead.
func (*SuffixSet) Descriptor() ([]byte, []int) {
	return file_lang_dervaze_proto_rawDescGZIP(), []int{5}
}

func (x *SuffixSet) GetSuffixes() []*Suffix {
	if x != nil {
		return x.Suffixes
	}
	return nil
}

func (x *SuffixSet) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

type TranslateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to R:
	//	*TranslateRequest_TurkishLatin
	//	*TranslateRequest_Visenc
	//	*TranslateRequest_Ottoman
	R isTranslateRequest_R `protobuf_oneof:"r"`
}

func (x *TranslateRequest) Reset() {
	*x = TranslateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lang_dervaze_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TranslateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranslateRequest) ProtoMessage() {}

func (x *TranslateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lang_dervaze_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranslateRequest.ProtoReflect.Descriptor instead.
func (*TranslateRequest) Descriptor() ([]byte, []int) {
	return file_lang_dervaze_proto_rawDescGZIP(), []int{6}
}

func (m *TranslateRequest) GetR() isTranslateRequest_R {
	if m != nil {
		return m.R
	}
	return nil
}

func (x *TranslateRequest) GetTurkishLatin() string {
	if x, ok := x.GetR().(*TranslateRequest_TurkishLatin); ok {
		return x.TurkishLatin
	}
	return ""
}

func (x *TranslateRequest) GetVisenc() string {
	if x, ok := x.GetR().(*TranslateRequest_Visenc); ok {
		return x.Visenc
	}
	return ""
}

func (x *TranslateRequest) GetOttoman() string {
	if x, ok := x.GetR().(*TranslateRequest_Ottoman); ok {
		return x.Ottoman
	}
	return ""
}

type isTranslateRequest_R interface {
	isTranslateRequest_R()
}

type TranslateRequest_TurkishLatin struct {
	TurkishLatin string `protobuf:"bytes,2,opt,name=turkishLatin,proto3,oneof"`
}

type TranslateRequest_Visenc struct {
	Visenc string `protobuf:"bytes,3,opt,name=visenc,proto3,oneof"`
}

type TranslateRequest_Ottoman struct {
	Ottoman string `protobuf:"bytes,4,opt,name=ottoman,proto3,oneof"`
}

func (*TranslateRequest_TurkishLatin) isTranslateRequest_R() {}

func (*TranslateRequest_Visenc) isTranslateRequest_R() {}

func (*TranslateRequest_Ottoman) isTranslateRequest_R() {}

type TranslationWord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Root             *Root                `protobuf:"bytes,1,opt,name=root,proto3" json:"root,omitempty"`
	Suffixes         []*Suffix            `protobuf:"bytes,2,rep,name=suffixes,proto3" json:"suffixes,omitempty"`
	Remaining        string               `protobuf:"bytes,3,opt,name=remaining,proto3" json:"remaining,omitempty"`
	Direction        TranslationDirection `protobuf:"varint,4,opt,name=direction,proto3,enum=dervaze.TranslationDirection" json:"direction,omitempty"`
	OttomanRemaining *OttomanWord         `protobuf:"bytes,5,opt,name=ottomanRemaining,proto3" json:"ottomanRemaining,omitempty"`
}

func (x *TranslationWord) Reset() {
	*x = TranslationWord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lang_dervaze_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TranslationWord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranslationWord) ProtoMessage() {}

func (x *TranslationWord) ProtoReflect() protoreflect.Message {
	mi := &file_lang_dervaze_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranslationWord.ProtoReflect.Descriptor instead.
func (*TranslationWord) Descriptor() ([]byte, []int) {
	return file_lang_dervaze_proto_rawDescGZIP(), []int{7}
}

func (x *TranslationWord) GetRoot() *Root {
	if x != nil {
		return x.Root
	}
	return nil
}

func (x *TranslationWord) GetSuffixes() []*Suffix {
	if x != nil {
		return x.Suffixes
	}
	return nil
}

func (x *TranslationWord) GetRemaining() string {
	if x != nil {
		return x.Remaining
	}
	return ""
}

func (x *TranslationWord) GetDirection() TranslationDirection {
	if x != nil {
		return x.Direction
	}
	return TranslationDirection_tr2otm
}

func (x *TranslationWord) GetOttomanRemaining() *OttomanWord {
	if x != nil {
		return x.OttomanRemaining
	}
	return nil
}

type TranslationVariety struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Varieties []*TranslationWord   `protobuf:"bytes,1,rep,name=varieties,proto3" json:"varieties,omitempty"`
	Direction TranslationDirection `protobuf:"varint,2,opt,name=direction,proto3,enum=dervaze.TranslationDirection" json:"direction,omitempty"`
}

func (x *TranslationVariety) Reset() {
	*x = TranslationVariety{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lang_dervaze_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TranslationVariety) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranslationVariety) ProtoMessage() {}

func (x *TranslationVariety) ProtoReflect() protoreflect.Message {
	mi := &file_lang_dervaze_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranslationVariety.ProtoReflect.Descriptor instead.
func (*TranslationVariety) Descriptor() ([]byte, []int) {
	return file_lang_dervaze_proto_rawDescGZIP(), []int{8}
}

func (x *TranslationVariety) GetVarieties() []*TranslationWord {
	if x != nil {
		return x.Varieties
	}
	return nil
}

func (x *TranslationVariety) GetDirection() TranslationDirection {
	if x != nil {
		return x.Direction
	}
	return TranslationDirection_tr2otm
}

type TranslationSentence struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Words     []*TranslationVariety `protobuf:"bytes,1,rep,name=words,proto3" json:"words,omitempty"`
	Direction TranslationDirection  `protobuf:"varint,2,opt,name=direction,proto3,enum=dervaze.TranslationDirection" json:"direction,omitempty"`
}

func (x *TranslationSentence) Reset() {
	*x = TranslationSentence{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lang_dervaze_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TranslationSentence) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranslationSentence) ProtoMessage() {}

func (x *TranslationSentence) ProtoReflect() protoreflect.Message {
	mi := &file_lang_dervaze_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranslationSentence.ProtoReflect.Descriptor instead.
func (*TranslationSentence) Descriptor() ([]byte, []int) {
	return file_lang_dervaze_proto_rawDescGZIP(), []int{9}
}

func (x *TranslationSentence) GetWords() []*TranslationVariety {
	if x != nil {
		return x.Words
	}
	return nil
}

func (x *TranslationSentence) GetDirection() TranslationDirection {
	if x != nil {
		return x.Direction
	}
	return TranslationDirection_tr2otm
}

type TranslateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Request   *TranslateRequest      `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
	Sentences []*TranslationSentence `protobuf:"bytes,2,rep,name=sentences,proto3" json:"sentences,omitempty"`
}

func (x *TranslateResponse) Reset() {
	*x = TranslateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lang_dervaze_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TranslateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranslateResponse) ProtoMessage() {}

func (x *TranslateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lang_dervaze_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranslateResponse.ProtoReflect.Descriptor instead.
func (*TranslateResponse) Descriptor() ([]byte, []int) {
	return file_lang_dervaze_proto_rawDescGZIP(), []int{10}
}

func (x *TranslateResponse) GetRequest() *TranslateRequest {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *TranslateResponse) GetSentences() []*TranslationSentence {
	if x != nil {
		return x.Sentences
	}
	return nil
}

var File_lang_dervaze_proto protoreflect.FileDescriptor

var file_lang_dervaze_proto_rawDesc = []byte{
	0x0a, 0x12, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x64, 0x65, 0x72, 0x76, 0x61, 0x7a, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x64, 0x65, 0x72, 0x76, 0x61, 0x7a, 0x65, 0x22, 0xc2, 0x01,
	0x0a, 0x0d, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x36, 0x0a, 0x0b, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x64, 0x65, 0x72, 0x76, 0x61, 0x7a, 0x65, 0x2e, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x0b, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x33, 0x0a, 0x0a, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x13, 0x2e, 0x64, 0x65, 0x72, 0x76, 0x61, 0x7a, 0x65, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x22, 0xc5, 0x01, 0x0a, 0x0b, 0x4f, 0x74, 0x74, 0x6f, 0x6d, 0x61, 0x6e, 0x57, 0x6f,
	0x72, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x69, 0x73, 0x65, 0x6e, 0x63, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x76, 0x69, 0x73, 0x65, 0x6e, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x6e,
	0x69, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75, 0x6e, 0x69,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x62, 0x6a, 0x61, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x61, 0x62, 0x6a, 0x61, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x76, 0x69,
	0x73, 0x65, 0x6e, 0x63, 0x4c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0d, 0x76, 0x69, 0x73, 0x65, 0x6e, 0x63, 0x4c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x73,
	0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4b, 0x65, 0x79, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4b, 0x65, 0x79, 0x12, 0x2a,
	0x0a, 0x10, 0x64, 0x6f, 0x74, 0x6c, 0x65, 0x73, 0x73, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4b,
	0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x64, 0x6f, 0x74, 0x6c, 0x65, 0x73,
	0x73, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4b, 0x65, 0x79, 0x22, 0xd7, 0x04, 0x0a, 0x04, 0x52,
	0x6f, 0x6f, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x75, 0x72, 0x6b, 0x69, 0x73, 0x68, 0x4c, 0x61,
	0x74, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x75, 0x72, 0x6b, 0x69,
	0x73, 0x68, 0x4c, 0x61, 0x74, 0x69, 0x6e, 0x12, 0x2e, 0x0a, 0x07, 0x6f, 0x74, 0x74, 0x6f, 0x6d,
	0x61, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x64, 0x65, 0x72, 0x76, 0x61,
	0x7a, 0x65, 0x2e, 0x4f, 0x74, 0x74, 0x6f, 0x6d, 0x61, 0x6e, 0x57, 0x6f, 0x72, 0x64, 0x52, 0x07,
	0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x61, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x56,
	0x6f, 0x77, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x61, 0x73, 0x74,
	0x56, 0x6f, 0x77, 0x65, 0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x6e,
	0x73, 0x6f, 0x6e, 0x61, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6c, 0x61,
	0x73, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6e, 0x61, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x65,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4c, 0x61, 0x73, 0x74, 0x56, 0x6f, 0x77, 0x65,
	0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x4c, 0x61, 0x73, 0x74, 0x56, 0x6f, 0x77, 0x65, 0x6c, 0x12, 0x34, 0x0a, 0x15, 0x65,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x75, 0x72, 0x6b, 0x69, 0x73, 0x68, 0x4c,
	0x61, 0x74, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x65, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x75, 0x72, 0x6b, 0x69, 0x73, 0x68, 0x4c, 0x61, 0x74, 0x69,
	0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x56, 0x69,
	0x73, 0x65, 0x6e, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x65, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x56, 0x69, 0x73, 0x65, 0x6e, 0x63, 0x12, 0x14, 0x0a, 0x05, 0x61,
	0x62, 0x6a, 0x61, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x61, 0x62, 0x6a, 0x61,
	0x64, 0x12, 0x39, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x4f, 0x66, 0x53, 0x70, 0x65, 0x65, 0x63,
	0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x64, 0x65, 0x72, 0x76, 0x61, 0x7a,
	0x65, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x4f, 0x66, 0x53, 0x70, 0x65, 0x65, 0x63, 0x68, 0x52, 0x0c,
	0x70, 0x61, 0x72, 0x74, 0x4f, 0x66, 0x53, 0x70, 0x65, 0x65, 0x63, 0x68, 0x12, 0x24, 0x0a, 0x0d,
	0x65, 0x6e, 0x64, 0x73, 0x57, 0x69, 0x74, 0x68, 0x56, 0x6f, 0x77, 0x65, 0x6c, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0d, 0x65, 0x6e, 0x64, 0x73, 0x57, 0x69, 0x74, 0x68, 0x56, 0x6f, 0x77,
	0x65, 0x6c, 0x12, 0x26, 0x0a, 0x0e, 0x68, 0x61, 0x73, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x56,
	0x6f, 0x77, 0x65, 0x6c, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x68, 0x61, 0x73, 0x53,
	0x69, 0x6e, 0x67, 0x6c, 0x65, 0x56, 0x6f, 0x77, 0x65, 0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x6c, 0x61,
	0x73, 0x74, 0x56, 0x6f, 0x77, 0x65, 0x6c, 0x48, 0x61, 0x72, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x56, 0x6f, 0x77, 0x65, 0x6c, 0x48, 0x61, 0x72, 0x64,
	0x12, 0x2c, 0x0a, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6e, 0x61, 0x6e,
	0x74, 0x48, 0x61, 0x72, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x6c, 0x61, 0x73,
	0x74, 0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6e, 0x61, 0x6e, 0x74, 0x48, 0x61, 0x72, 0x64, 0x12, 0x34,
	0x0a, 0x15, 0x68, 0x61, 0x73, 0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6e, 0x61, 0x6e, 0x74, 0x53, 0x6f,
	0x66, 0x74, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x68,
	0x61, 0x73, 0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6e, 0x61, 0x6e, 0x74, 0x53, 0x6f, 0x66, 0x74, 0x65,
	0x6e, 0x69, 0x6e, 0x67, 0x22, 0x2e, 0x0a, 0x07, 0x52, 0x6f, 0x6f, 0x74, 0x53, 0x65, 0x74, 0x12,
	0x23, 0x0a, 0x05, 0x72, 0x6f, 0x6f, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x64, 0x65, 0x72, 0x76, 0x61, 0x7a, 0x65, 0x2e, 0x52, 0x6f, 0x6f, 0x74, 0x52, 0x05, 0x72,
	0x6f, 0x6f, 0x74, 0x73, 0x22, 0xde, 0x05, 0x0a, 0x06, 0x53, 0x75, 0x66, 0x66, 0x69, 0x78, 0x12,
	0x22, 0x0a, 0x0c, 0x74, 0x75, 0x72, 0x6b, 0x69, 0x73, 0x68, 0x4c, 0x61, 0x74, 0x69, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x75, 0x72, 0x6b, 0x69, 0x73, 0x68, 0x4c, 0x61,
	0x74, 0x69, 0x6e, 0x12, 0x2e, 0x0a, 0x07, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x61, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x64, 0x65, 0x72, 0x76, 0x61, 0x7a, 0x65, 0x2e, 0x4f,
	0x74, 0x74, 0x6f, 0x6d, 0x61, 0x6e, 0x57, 0x6f, 0x72, 0x64, 0x52, 0x07, 0x6f, 0x74, 0x74, 0x6f,
	0x6d, 0x61, 0x6e, 0x12, 0x2e, 0x0a, 0x12, 0x6d, 0x6f, 0x72, 0x70, 0x68, 0x6f, 0x6c, 0x6f, 0x67,
	0x69, 0x63, 0x61, 0x6c, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x6d, 0x6f, 0x72, 0x70, 0x68, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x4c,
	0x61, 0x73, 0x74, 0x56, 0x6f, 0x77, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x4c, 0x61, 0x73, 0x74, 0x56, 0x6f, 0x77, 0x65,
	0x6c, 0x12, 0x37, 0x0a, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x50, 0x4f, 0x53,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x64, 0x65, 0x72, 0x76, 0x61, 0x7a, 0x65,
	0x2e, 0x50, 0x61, 0x72, 0x74, 0x4f, 0x66, 0x53, 0x70, 0x65, 0x65, 0x63, 0x68, 0x52, 0x0b, 0x72,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x50, 0x4f, 0x53, 0x12, 0x42, 0x0a, 0x15, 0x72, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x45, 0x6e, 0x64, 0x73, 0x57, 0x69, 0x74, 0x68, 0x56, 0x6f,
	0x77, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x64, 0x65, 0x72, 0x76,
	0x61, 0x7a, 0x65, 0x2e, 0x52, 0x65, 0x71, 0x52, 0x15, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x73, 0x45, 0x6e, 0x64, 0x73, 0x57, 0x69, 0x74, 0x68, 0x56, 0x6f, 0x77, 0x65, 0x6c, 0x12, 0x44,
	0x0a, 0x16, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x48, 0x61, 0x73, 0x53, 0x69, 0x6e,
	0x67, 0x6c, 0x65, 0x56, 0x6f, 0x77, 0x65, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c,
	0x2e, 0x64, 0x65, 0x72, 0x76, 0x61, 0x7a, 0x65, 0x2e, 0x52, 0x65, 0x71, 0x52, 0x16, 0x72, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x48, 0x61, 0x73, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x56,
	0x6f, 0x77, 0x65, 0x6c, 0x12, 0x4a, 0x0a, 0x19, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73,
	0x4c, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6e, 0x61, 0x6e, 0x74, 0x48, 0x61, 0x72,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x64, 0x65, 0x72, 0x76, 0x61, 0x7a,
	0x65, 0x2e, 0x52, 0x65, 0x71, 0x52, 0x19, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x4c,
	0x61, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6e, 0x61, 0x6e, 0x74, 0x48, 0x61, 0x72, 0x64,
	0x12, 0x28, 0x0a, 0x0f, 0x73, 0x65, 0x74, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x56, 0x6f, 0x77, 0x65,
	0x6c, 0x54, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x65, 0x74, 0x73, 0x4c,
	0x61, 0x73, 0x74, 0x56, 0x6f, 0x77, 0x65, 0x6c, 0x54, 0x6f, 0x12, 0x4c, 0x0a, 0x1a, 0x72, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x75, 0x66, 0x66, 0x69, 0x78, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c,
	0x2e, 0x64, 0x65, 0x72, 0x76, 0x61, 0x7a, 0x65, 0x2e, 0x52, 0x65, 0x71, 0x52, 0x1a, 0x72, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x75, 0x66, 0x66, 0x69, 0x78, 0x12, 0x38, 0x0a, 0x17, 0x69, 0x6e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x66, 0x66, 0x69, 0x78, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x17, 0x69, 0x6e, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x66, 0x66, 0x69, 0x78, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x65, 0x73, 0x12, 0x3b, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x73, 0x50, 0x4f,
	0x53, 0x74, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x64, 0x65, 0x72, 0x76,
	0x61, 0x7a, 0x65, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x4f, 0x66, 0x53, 0x70, 0x65, 0x65, 0x63, 0x68,
	0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x73, 0x50, 0x4f, 0x53, 0x74, 0x6f, 0x12,
	0x24, 0x0a, 0x0d, 0x65, 0x6e, 0x64, 0x73, 0x57, 0x69, 0x74, 0x68, 0x56, 0x6f, 0x77, 0x65, 0x6c,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x65, 0x6e, 0x64, 0x73, 0x57, 0x69, 0x74, 0x68,
	0x56, 0x6f, 0x77, 0x65, 0x6c, 0x22, 0x4a, 0x0a, 0x09, 0x53, 0x75, 0x66, 0x66, 0x69, 0x78, 0x53,
	0x65, 0x74, 0x12, 0x2b, 0x0a, 0x08, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x65, 0x72, 0x76, 0x61, 0x7a, 0x65, 0x2e, 0x53,
	0x75, 0x66, 0x66, 0x69, 0x78, 0x52, 0x08, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x65, 0x73, 0x12,
	0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x61,
	0x67, 0x22, 0x73, 0x0a, 0x10, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0c, 0x74, 0x75, 0x72, 0x6b, 0x69, 0x73, 0x68,
	0x4c, 0x61, 0x74, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0c, 0x74,
	0x75, 0x72, 0x6b, 0x69, 0x73, 0x68, 0x4c, 0x61, 0x74, 0x69, 0x6e, 0x12, 0x18, 0x0a, 0x06, 0x76,
	0x69, 0x73, 0x65, 0x6e, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x76,
	0x69, 0x73, 0x65, 0x6e, 0x63, 0x12, 0x1a, 0x0a, 0x07, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x61, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x61,
	0x6e, 0x42, 0x03, 0x0a, 0x01, 0x72, 0x22, 0xfe, 0x01, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x6f, 0x72, 0x64, 0x12, 0x21, 0x0a, 0x04, 0x72, 0x6f,
	0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x64, 0x65, 0x72, 0x76, 0x61,
	0x7a, 0x65, 0x2e, 0x52, 0x6f, 0x6f, 0x74, 0x52, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x12, 0x2b, 0x0a,
	0x08, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x64, 0x65, 0x72, 0x76, 0x61, 0x7a, 0x65, 0x2e, 0x53, 0x75, 0x66, 0x66, 0x69, 0x78,
	0x52, 0x08, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65,
	0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72,
	0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x3b, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x64, 0x65,
	0x72, 0x76, 0x61, 0x7a, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x10, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x61, 0x6e,
	0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x64, 0x65, 0x72, 0x76, 0x61, 0x7a, 0x65, 0x2e, 0x4f, 0x74, 0x74, 0x6f, 0x6d, 0x61,
	0x6e, 0x57, 0x6f, 0x72, 0x64, 0x52, 0x10, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x61, 0x6e, 0x52, 0x65,
	0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x22, 0x89, 0x01, 0x0a, 0x12, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x12, 0x36,
	0x0a, 0x09, 0x76, 0x61, 0x72, 0x69, 0x65, 0x74, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x64, 0x65, 0x72, 0x76, 0x61, 0x7a, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x6f, 0x72, 0x64, 0x52, 0x09, 0x76, 0x61, 0x72,
	0x69, 0x65, 0x74, 0x69, 0x65, 0x73, 0x12, 0x3b, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x64, 0x65, 0x72, 0x76,
	0x61, 0x7a, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x85, 0x01, 0x0a, 0x13, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x31, 0x0a, 0x05, 0x77,
	0x6f, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x64, 0x65, 0x72,
	0x76, 0x61, 0x7a, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x56, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x52, 0x05, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x3b,
	0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1d, 0x2e, 0x64, 0x65, 0x72, 0x76, 0x61, 0x7a, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x84, 0x01, 0x0a, 0x11,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x33, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x64, 0x65, 0x72, 0x76, 0x61, 0x7a, 0x65, 0x2e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x09, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x6e,
	0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x64, 0x65, 0x72, 0x76,
	0x61, 0x7a, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x09, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63,
	0x65, 0x73, 0x2a, 0x2e, 0x0a, 0x0a, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x0a, 0x0a, 0x06, 0x50, 0x52, 0x45, 0x46, 0x49, 0x58, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05,
	0x46, 0x55, 0x5a, 0x5a, 0x59, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x45, 0x47, 0x45, 0x58,
	0x10, 0x02, 0x2a, 0x4e, 0x0a, 0x0b, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x12, 0x08, 0x0a, 0x04, 0x41, 0x55, 0x54, 0x4f, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x54,
	0x55, 0x52, 0x4b, 0x49, 0x53, 0x48, 0x5f, 0x4c, 0x41, 0x54, 0x49, 0x4e, 0x10, 0x01, 0x12, 0x0a,
	0x0a, 0x06, 0x56, 0x49, 0x53, 0x45, 0x4e, 0x43, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x4f, 0x54,
	0x54, 0x4f, 0x4d, 0x41, 0x4e, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x42, 0x4a, 0x41, 0x44,
	0x10, 0x04, 0x2a, 0x27, 0x0a, 0x03, 0x52, 0x65, 0x71, 0x12, 0x09, 0x0a, 0x05, 0x4e, 0x45, 0x56,
	0x45, 0x52, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x41, 0x59, 0x42, 0x45, 0x10, 0x01, 0x12,
	0x0a, 0x0a, 0x06, 0x41, 0x4c, 0x57, 0x41, 0x59, 0x53, 0x10, 0x02, 0x2a, 0x33, 0x0a, 0x0c, 0x50,
	0x61, 0x72, 0x74, 0x4f, 0x66, 0x53, 0x70, 0x65, 0x65, 0x63, 0x68, 0x12, 0x08, 0x0a, 0x04, 0x4e,
	0x4f, 0x55, 0x4e, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x56, 0x45, 0x52, 0x42, 0x10, 0x01, 0x12,
	0x0f, 0x0a, 0x0b, 0x50, 0x52, 0x4f, 0x50, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x55, 0x4e, 0x10, 0x02,
	0x2a, 0x2e, 0x0a, 0x14, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0a, 0x0a, 0x06, 0x74, 0x72, 0x32, 0x6f,
	0x74, 0x6d, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x6f, 0x74, 0x6d, 0x32, 0x74, 0x72, 0x10, 0x01,
	0x32, 0x8c, 0x02, 0x0a, 0x07, 0x44, 0x65, 0x72, 0x76, 0x61, 0x7a, 0x65, 0x12, 0x3f, 0x0a, 0x0f,
	0x56, 0x69, 0x73, 0x65, 0x6e, 0x63, 0x54, 0x6f, 0x4f, 0x74, 0x74, 0x6f, 0x6d, 0x61, 0x6e, 0x12,
	0x14, 0x2e, 0x64, 0x65, 0x72, 0x76, 0x61, 0x7a, 0x65, 0x2e, 0x4f, 0x74, 0x74, 0x6f, 0x6d, 0x61,
	0x6e, 0x57, 0x6f, 0x72, 0x64, 0x1a, 0x14, 0x2e, 0x64, 0x65, 0x72, 0x76, 0x61, 0x7a, 0x65, 0x2e,
	0x4f, 0x74, 0x74, 0x6f, 0x6d, 0x61, 0x6e, 0x57, 0x6f, 0x72, 0x64, 0x22, 0x00, 0x12, 0x3f, 0x0a,
	0x0f, 0x4f, 0x74, 0x74, 0x6f, 0x6d, 0x61, 0x6e, 0x54, 0x6f, 0x56, 0x69, 0x73, 0x65, 0x6e, 0x63,
	0x12, 0x14, 0x2e, 0x64, 0x65, 0x72, 0x76, 0x61, 0x7a, 0x65, 0x2e, 0x4f, 0x74, 0x74, 0x6f, 0x6d,
	0x61, 0x6e, 0x57, 0x6f, 0x72, 0x64, 0x1a, 0x14, 0x2e, 0x64, 0x65, 0x72, 0x76, 0x61, 0x7a, 0x65,
	0x2e, 0x4f, 0x74, 0x74, 0x6f, 0x6d, 0x61, 0x6e, 0x57, 0x6f, 0x72, 0x64, 0x22, 0x00, 0x12, 0x39,
	0x0a, 0x0b, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x6f, 0x6f, 0x74, 0x73, 0x12, 0x16, 0x2e,
	0x64, 0x65, 0x72, 0x76, 0x61, 0x7a, 0x65, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x64, 0x65, 0x72, 0x76, 0x61, 0x7a, 0x65, 0x2e,
	0x52, 0x6f, 0x6f, 0x74, 0x53, 0x65, 0x74, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x09, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x19, 0x2e, 0x64, 0x65, 0x72, 0x76, 0x61, 0x7a, 0x65,
	0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1a, 0x2e, 0x64, 0x65, 0x72, 0x76, 0x61, 0x7a, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42,
	0x36, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x65, 0x72, 0x76, 0x61, 0x7a, 0x65, 0x2e, 0x72,
	0x70, 0x63, 0x42, 0x0c, 0x44, 0x65, 0x72, 0x76, 0x61, 0x7a, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x50, 0x01, 0x5a, 0x0c, 0x64, 0x65, 0x72, 0x76, 0x61, 0x7a, 0x65, 0x2f, 0x6c, 0x61, 0x6e, 0x67,
	0xa2, 0x02, 0x04, 0x44, 0x52, 0x56, 0x5a, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_lang_dervaze_proto_rawDescOnce sync.Once
	file_lang_dervaze_proto_rawDescData = file_lang_dervaze_proto_rawDesc
)

func file_lang_dervaze_proto_rawDescGZIP() []byte {
	file_lang_dervaze_proto_rawDescOnce.Do(func() {
		file_lang_dervaze_proto_rawDescData = protoimpl.X.CompressGZIP(file_lang_dervaze_proto_rawDescData)
	})
	return file_lang_dervaze_proto_rawDescData
}

var file_lang_dervaze_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_lang_dervaze_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_lang_dervaze_proto_goTypes = []interface{}{
	(SearchType)(0),             // 0: dervaze.SearchType
	(SearchField)(0),            // 1: dervaze.SearchField
	(Req)(0),                    // 2: dervaze.Req
	(PartOfSpeech)(0),           // 3: dervaze.PartOfSpeech
	(TranslationDirection)(0),   // 4: dervaze.TranslationDirection
	(*SearchRequest)(nil),       // 5: dervaze.SearchRequest
	(*OttomanWord)(nil),         // 6: dervaze.OttomanWord
	(*Root)(nil),                // 7: dervaze.Root
	(*RootSet)(nil),             // 8: dervaze.RootSet
	(*Suffix)(nil),              // 9: dervaze.Suffix
	(*SuffixSet)(nil),           // 10: dervaze.SuffixSet
	(*TranslateRequest)(nil),    // 11: dervaze.TranslateRequest
	(*TranslationWord)(nil),     // 12: dervaze.TranslationWord
	(*TranslationVariety)(nil),  // 13: dervaze.TranslationVariety
	(*TranslationSentence)(nil), // 14: dervaze.TranslationSentence
	(*TranslateResponse)(nil),   // 15: dervaze.TranslateResponse
}
var file_lang_dervaze_proto_depIdxs = []int32{
	1,  // 0: dervaze.SearchRequest.searchField:type_name -> dervaze.SearchField
	0,  // 1: dervaze.SearchRequest.searchType:type_name -> dervaze.SearchType
	6,  // 2: dervaze.Root.ottoman:type_name -> dervaze.OttomanWord
	3,  // 3: dervaze.Root.partOfSpeech:type_name -> dervaze.PartOfSpeech
	7,  // 4: dervaze.RootSet.roots:type_name -> dervaze.Root
	6,  // 5: dervaze.Suffix.ottoman:type_name -> dervaze.OttomanWord
	3,  // 6: dervaze.Suffix.requiresPOS:type_name -> dervaze.PartOfSpeech
	2,  // 7: dervaze.Suffix.requiresEndsWithVowel:type_name -> dervaze.Req
	2,  // 8: dervaze.Suffix.requiresHasSingleVowel:type_name -> dervaze.Req
	2,  // 9: dervaze.Suffix.requiresLastConsonantHard:type_name -> dervaze.Req
	2,  // 10: dervaze.Suffix.requiresContinuationSuffix:type_name -> dervaze.Req
	3,  // 11: dervaze.Suffix.convertsPOSto:type_name -> dervaze.PartOfSpeech
	9,  // 12: dervaze.SuffixSet.suffixes:type_name -> dervaze.Suffix
	7,  // 13: dervaze.TranslationWord.root:type_name -> dervaze.Root
	9,  // 14: dervaze.TranslationWord.suffixes:type_name -> dervaze.Suffix
	4,  // 15: dervaze.TranslationWord.direction:type_name -> dervaze.TranslationDirection
	6,  // 16: dervaze.TranslationWord.ottomanRemaining:type_name -> dervaze.OttomanWord
	12, // 17: dervaze.TranslationVariety.varieties:type_name -> dervaze.TranslationWord
	4,  // 18: dervaze.TranslationVariety.direction:type_name -> dervaze.TranslationDirection
	13, // 19: dervaze.TranslationSentence.words:type_name -> dervaze.TranslationVariety
	4,  // 20: dervaze.TranslationSentence.direction:type_name -> dervaze.TranslationDirection
	11, // 21: dervaze.TranslateResponse.request:type_name -> dervaze.TranslateRequest
	14, // 22: dervaze.TranslateResponse.sentences:type_name -> dervaze.TranslationSentence
	6,  // 23: dervaze.Dervaze.VisencToOttoman:input_type -> dervaze.OttomanWord
	6,  // 24: dervaze.Dervaze.OttomanToVisenc:input_type -> dervaze.OttomanWord
	5,  // 25: dervaze.Dervaze.SearchRoots:input_type -> dervaze.SearchRequest
	11, // 26: dervaze.Dervaze.Translate:input_type -> dervaze.TranslateRequest
	6,  // 27: dervaze.Dervaze.VisencToOttoman:output_type -> dervaze.OttomanWord
	6,  // 28: dervaze.Dervaze.OttomanToVisenc:output_type -> dervaze.OttomanWord
	8,  // 29: dervaze.Dervaze.SearchRoots:output_type -> dervaze.RootSet
	15, // 30: dervaze.Dervaze.Translate:output_type -> dervaze.TranslateResponse
	27, // [27:31] is the sub-list for method output_type
	23, // [23:27] is the sub-list for method input_type
	23, // [23:23] is the sub-list for extension type_name
	23, // [23:23] is the sub-list for extension extendee
	0,  // [0:23] is the sub-list for field type_name
}

func init() { file_lang_dervaze_proto_init() }
func file_lang_dervaze_proto_init() {
	if File_lang_dervaze_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_lang_dervaze_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lang_dervaze_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OttomanWord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lang_dervaze_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Root); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lang_dervaze_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RootSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lang_dervaze_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Suffix); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lang_dervaze_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuffixSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lang_dervaze_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TranslateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lang_dervaze_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TranslationWord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lang_dervaze_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TranslationVariety); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lang_dervaze_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TranslationSentence); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lang_dervaze_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TranslateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_lang_dervaze_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*TranslateRequest_TurkishLatin)(nil),
		(*TranslateRequest_Visenc)(nil),
		(*TranslateRequest_Ottoman)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_lang_dervaze_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_lang_dervaze_proto_goTypes,
		DependencyIndexes: file_lang_dervaze_proto_depIdxs,
		EnumInfos:         file_lang_dervaze_proto_enumTypes,
		MessageInfos:      file_lang_dervaze_proto_msgTypes,
	}.Build()
	File_lang_dervaze_proto = out.File
	file_lang_dervaze_proto_rawDesc = nil
	file_lang_dervaze_proto_goTypes = nil
	file_lang_dervaze_proto_depIdxs = nil
}
